#! /usr/bin/python3

import xml.etree.ElementTree as ET
from subprocess import Popen, PIPE
import os
import sys
from typing import List

from cf_checker import *
from cf_output import *
from output_modules.json import json_format_obj
import output_modules.all
import checker_modules.all

# Test Script : python3 __main__.py -p <src_file>
# Test Configuration : 
# {
# }
#

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(prog="codefree", description="CodeFree - Code Style Checker + Static Analysis and Reporting Tool")

    parser.add_argument(
        "-p",
        "--path",
        dest="path",
        nargs="?",
        action="store",
        help="Source Code Path. If not specified, the tool is run on the Current Working Directory.",
        default=os.getcwd()
    )

    checkerGroup = parser.add_argument_group('Checker Options')

    checkerGroup.description = "Set CodeFree Checker Options. CodeFree runs all checkers by default. Set --enable to none if you want to enable individual checkers."

    checkerGroup.add_argument(
        f"--enable",
        dest=f"enableCheckers",
        action="store",
        choices=["all", "none"],
        default="all",
        help="Enable/Disable all Checkers"
    )

    checker_module : CheckingModule
    for checker_module in CheckingModule.modules():
        checkerGroup.add_argument(
            f"--{checker_module.module_name}",
            dest=f"use_{checker_module.module_name}",
            action="store_const",
            const=checker_module,
            default=False,
            help=checker_module.checker_help
        )

    parser.add_argument(
        f"--output-file",
        dest="outputFile",
        action="store",
        type=argparse.FileType(mode='w+', errors=""),
        # type=argparse.FileType(mode='x', errors=""),
        help="Output to File. If not specified, output is printed to stdout.",
        default=None
    )

    default_fmt = FormattingModule.modules()[0].formatStr
    parser.set_defaults(formatClass=FormattingModule.modules()[0])
    outputGroup = parser.add_argument_group('Output Format Options')
    outputGroup.description = f"Choose a Format for the Output. Default is {default_fmt}. If multiple options are mentioned, last specified format is used."
    out_module : FormattingModule
    for out_module in FormattingModule.modules():
        outputGroup.add_argument(
            f"--{out_module.formatStr}",
            dest="formatClass",
            action="store_const",
            const=out_module,
            help=out_module.formatHelp
        )

        outModuleOpts = parser.add_argument_group(f'{out_module.formatStr} Output Options')
        if (len(out_module.formatOptions) > 0):
            outModuleOpts.description = f"These options should be used along with --{out_module.formatStr}, else they are ignored."

            option : FormatOption
            for option in out_module.formatOptions:
                if option.argAction == ArgActionOptions.Empty:
                    outModuleOpts.add_argument(
                        f"--{option.option}",
                        dest=f"{option.argDest}",
                        action=option.argAction,
                        help=option.argHelp
                    )
                else:
                    outModuleOpts.add_argument(
                        f"--{option.option}",
                        dest=f"{option.argDest}",
                        action="store",
                        const=option.argConst,
                        default=option.default,
                        help=option.argHelp
                    )

    args = parser.parse_args()

    print("Running CodeFree Analysis on path - " + args.path)

    print("\nRunning Checks...")
    out = {}

    output : List[CheckerOutput] = []

    checker_module : CheckingModule
    for checker_module in CheckingModule.modules():
        checker = args.__getattribute__(f"use_{checker_module.module_name}")
        if args.enableCheckers == "all" or checker:
            print(f"\nRunning {checker_module.module_name_friendly}...")
            output.extend(checker_module.checker(args.path))
        else:
            print(f"Skipping {checker_module.module_name} checks because it is disabled.")

    if args.outputFile is None:
        if args.formatClass.handlesOutputInternally:
            print("Output File Missing. Will dump raw output to stdout.")
            print("\n" + json_format_obj.formatter(args, out))
        else:
            print("\n" + args.formatClass.formatter(args, out))
    else:
        if args.formatClass.handlesOutputInternally:
            args.formatClass.formatter(args, output)
        else:
            args.outputFile.write(args.formatClass.formatter(args, out))
        print(f"\nReport saved to {os.path.realpath(args.outputFile.name)} in {args.formatClass.formatStr} format.")
    print("\nDone.")