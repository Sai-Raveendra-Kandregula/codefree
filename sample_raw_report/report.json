{"timestamp": "2024-04-14 05:13:00.152754+00:00", "data": [{"Module Type": "style", "File Name": "logger.c", "Module Name": "AStyle", "Check Passed": "Failed"}, {"Module Type": "style", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "AStyle", "Check Passed": "Failed"}, {"Module Type": "style", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "AStyle", "Check Passed": "Failed"}, {"Module Type": "style", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "AStyle", "Check Passed": "Failed"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 72, "Column": 14, "Context": "    zsock_t *consumer = zsock_new_push(consumer_endpoint);", "Description": "Local variable 'consumer' shadows outer function", "Symbol": "consumer", "Type": "shadowFunction", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 156, "Column": 18, "Context": "\t        for(int consumer = 0; consumer < CONSUMERS_COUNT; consumer++){", "Description": "Local variable 'consumer' shadows outer function", "Symbol": "consumer", "Type": "shadowFunction", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 58, "Column": 36, "Context": "int isFirstWorkerForConsumer(char *worker_transport){", "Description": "Parameter 'worker_transport' can be declared as pointer to const", "Symbol": "worker_transport", "Type": "constParameterPointer", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 122, "Column": 10, "Context": "    char consumers[CONSUMERS_COUNT][MAX_ENDPOINT_STR_LENGTH] = { \"ipc:///tmp/cfw/cons_in_1\" };", "Description": "Variable 'consumers' can be declared as const array", "Symbol": "consumers", "Type": "constVariable", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 218, "Column": 17, "Context": "    int pro_num = (int)arg;", "Description": "Variable 'pro_num' is assigned a value that is never used.", "Symbol": "pro_num", "Type": "unreadVariable", "Suggestion": null, "Primary CWE": "563", "CWE List": "563", "Additional Info": "https://cwe.mitre.org/data/definitions/563.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 88, "Column": 14, "Context": "    zsock_t *consumer = zsock_new_push(consumer_endpoint);", "Description": "Local variable 'consumer' shadows outer function", "Symbol": "consumer", "Type": "shadowFunction", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 173, "Column": 18, "Context": "\t        for(int consumer = 0; consumer < CONSUMERS_COUNT; consumer++){", "Description": "Local variable 'consumer' shadows outer function", "Symbol": "consumer", "Type": "shadowFunction", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 74, "Column": 36, "Context": "int isFirstWorkerForConsumer(char *worker_transport){", "Description": "Parameter 'worker_transport' can be declared as pointer to const", "Symbol": "worker_transport", "Type": "constParameterPointer", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 139, "Column": 10, "Context": "    char consumers[CONSUMERS_COUNT][MAX_ENDPOINT_STR_LENGTH] = { \"ipc:///tmp/cfw/cons_in_1\" };", "Description": "Variable 'consumers' can be declared as const array", "Symbol": "consumers", "Type": "constVariable", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 98, "Column": 14, "Context": "    zsock_t *consumer = zsock_new_push(consumer_endpoint);", "Description": "Local variable 'consumer' shadows outer function", "Symbol": "consumer", "Type": "shadowFunction", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 183, "Column": 18, "Context": "\t        for(int consumer = 0; consumer < CONSUMERS_COUNT; consumer++){", "Description": "Local variable 'consumer' shadows outer function", "Symbol": "consumer", "Type": "shadowFunction", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 80, "Column": 36, "Context": "int isFirstWorkerForConsumer(char *worker_transport){", "Description": "Parameter 'worker_transport' can be declared as pointer to const", "Symbol": "worker_transport", "Type": "constParameterPointer", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 149, "Column": 10, "Context": "    char consumers[CONSUMERS_COUNT][MAX_ENDPOINT_STR_LENGTH] = { \"ipc:///tmp/cfw/cons_in_1\" };", "Description": "Variable 'consumers' can be declared as const array", "Symbol": "consumers", "Type": "constVariable", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 67, "Column": 14, "Context": "    zsock_t *consumer = zsock_new_push(consumer_endpoint);", "Description": "Local variable 'consumer' shadows outer function", "Symbol": "consumer", "Type": "shadowFunction", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 150, "Column": 18, "Context": "\t        for(int consumer = 0; consumer < CONSUMERS_COUNT; consumer++){", "Description": "Local variable 'consumer' shadows outer function", "Symbol": "consumer", "Type": "shadowFunction", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 53, "Column": 36, "Context": "int isFirstWorkerForConsumer(char *worker_transport){", "Description": "Parameter 'worker_transport' can be declared as pointer to const", "Symbol": "worker_transport", "Type": "constParameterPointer", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "CWE", "Severity": "Minor", "Line": 116, "Column": 10, "Context": "    char consumers[CONSUMERS_COUNT][MAX_ENDPOINT_STR_LENGTH] = { \"ipc:///tmp/cfw/cons_in_1\" };", "Description": "Variable 'consumers' can be declared as const array", "Symbol": "consumers", "Type": "constVariable", "Suggestion": null, "Primary CWE": "398", "CWE List": "398", "Additional Info": "https://cwe.mitre.org/data/definitions/398.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Critical", "Line": 135, "Column": 13, "Context": "            strcpy(params[1], consumers[cons]); ///< Consumer Destination Endpoint", "Description": "Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).", "Symbol": "strcpy", "Type": "buffer", "Suggestion": "Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused).", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Critical", "Line": 172, "Column": 25, "Context": "                        sprintf(inflow_timestamps[message_count], \"%s,%s.%09ld\", msg, buff, ts.tv_nsec);", "Description": "Does not check for buffer overflows (CWE-120).", "Symbol": "sprintf", "Type": "buffer", "Suggestion": "Use sprintf_s, snprintf, or vsnprintf.", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Critical", "Line": 152, "Column": 13, "Context": "            strcpy(params[1], consumers[cons]); ///< Consumer Destination Endpoint", "Description": "Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).", "Symbol": "strcpy", "Type": "buffer", "Suggestion": "Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused).", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Critical", "Line": 189, "Column": 25, "Context": "                        sprintf(inflow_timestamps[message_count], \"%s,%s.%09ld\", msg, buff, ts.tv_nsec);", "Description": "Does not check for buffer overflows (CWE-120).", "Symbol": "sprintf", "Type": "buffer", "Suggestion": "Use sprintf_s, snprintf, or vsnprintf.", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Critical", "Line": 162, "Column": 13, "Context": "            strcpy(params[1], consumers[cons]); ///< Consumer Destination Endpoint", "Description": "Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).", "Symbol": "strcpy", "Type": "buffer", "Suggestion": "Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused).", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Critical", "Line": 199, "Column": 25, "Context": "                        sprintf(inflow_timestamps[message_count], \"%s,%s.%09ld\", msg, buff, ts.tv_nsec);", "Description": "Does not check for buffer overflows (CWE-120).", "Symbol": "sprintf", "Type": "buffer", "Suggestion": "Use sprintf_s, snprintf, or vsnprintf.", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Critical", "Line": 129, "Column": 13, "Context": "            strcpy(params[1], consumers[cons]); ///< Consumer Destination Endpoint", "Description": "Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).", "Symbol": "strcpy", "Type": "buffer", "Suggestion": "Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused).", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 114, "Column": 5, "Context": "char inflow_timestamps[PRODUCERS_COUNT * PER_PRODUCER_MSG_COUNT][(MSG_MAX_LENGTH * 2) + 1];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 122, "Column": 5, "Context": "    char consumers[CONSUMERS_COUNT][MAX_ENDPOINT_STR_LENGTH] = { \"ipc:///tmp/cfw/cons_in_1\" };", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 133, "Column": 13, "Context": "            sprintf(params[0], \"ipc:///tmp/cfw/c_%dw_%d\", cons, worker); ///< Worker Listener Endpoint to use for further communication", "Description": "Does not check for buffer overflows (CWE-120).", "Symbol": "sprintf", "Type": "buffer", "Suggestion": "Use sprintf_s, snprintf, or vsnprintf.", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 170, "Column": 4, "Context": "\t\t\tchar buff[100];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 184, "Column": 5, "Context": "char filename[25];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 185, "Column": 5, "Context": "    sprintf(filename, \"%dP_%dM.csv\", PRODUCERS_COUNT, PER_PRODUCER_MSG_COUNT);", "Description": "Does not check for buffer overflows (CWE-120).", "Symbol": "sprintf", "Type": "buffer", "Suggestion": "Use sprintf_s, snprintf, or vsnprintf.", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 186, "Column": 16, "Context": "    FILE *fp = fopen(filename, \"w\");", "Description": "Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).", "Symbol": "fopen", "Type": "misc", "Suggestion": "", "Primary CWE": 362, "CWE List": "362", "Additional Info": "https://cwe.mitre.org/data/definitions/362.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 188, "Column": 10, "Context": "    fp = fopen(filename, \"a\");", "Description": "Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).", "Symbol": "fopen", "Type": "misc", "Suggestion": "", "Primary CWE": 362, "CWE List": "362", "Additional Info": "https://cwe.mitre.org/data/definitions/362.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 226, "Column": 2, "Context": "\tchar buff[100];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 131, "Column": 5, "Context": "char inflow_timestamps[PRODUCERS_COUNT * PER_PRODUCER_MSG_COUNT][(MSG_MAX_LENGTH * 2) + 1];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 139, "Column": 5, "Context": "    char consumers[CONSUMERS_COUNT][MAX_ENDPOINT_STR_LENGTH] = { \"ipc:///tmp/cfw/cons_in_1\" };", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 150, "Column": 13, "Context": "            sprintf(params[0], \"ipc:///tmp/cfw/c_%dw_%d\", cons, worker); ///< Worker Listener Endpoint to use for further communication", "Description": "Does not check for buffer overflows (CWE-120).", "Symbol": "sprintf", "Type": "buffer", "Suggestion": "Use sprintf_s, snprintf, or vsnprintf.", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 187, "Column": 4, "Context": "\t\t\tchar buff[100];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 201, "Column": 5, "Context": "char filename[25];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 202, "Column": 5, "Context": "    sprintf(filename, \"%dP_%dM_bound.csv\", PRODUCERS_COUNT, PER_PRODUCER_MSG_COUNT);", "Description": "Does not check for buffer overflows (CWE-120).", "Symbol": "sprintf", "Type": "buffer", "Suggestion": "Use sprintf_s, snprintf, or vsnprintf.", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 203, "Column": 16, "Context": "    FILE *fp = fopen(filename, \"w\");", "Description": "Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).", "Symbol": "fopen", "Type": "misc", "Suggestion": "", "Primary CWE": 362, "CWE List": "362", "Additional Info": "https://cwe.mitre.org/data/definitions/362.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 205, "Column": 10, "Context": "    fp = fopen(filename, \"a\");", "Description": "Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).", "Symbol": "fopen", "Type": "misc", "Suggestion": "", "Primary CWE": 362, "CWE List": "362", "Additional Info": "https://cwe.mitre.org/data/definitions/362.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 244, "Column": 2, "Context": "\tchar buff[100];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 141, "Column": 5, "Context": "char inflow_timestamps[u_PRODUCERS_COUNT * u_PER_PRODUCER_MSG_COUNT][(MSG_MAX_LENGTH * 2) + 1];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 149, "Column": 5, "Context": "    char consumers[CONSUMERS_COUNT][MAX_ENDPOINT_STR_LENGTH] = { \"ipc:///tmp/cfw/cons_in_1\" };", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 160, "Column": 13, "Context": "            sprintf(params[0], \"ipc:///tmp/cfw/c_%dw_%d\", cons, worker); ///< Worker Listener Endpoint to use for further communication", "Description": "Does not check for buffer overflows (CWE-120).", "Symbol": "sprintf", "Type": "buffer", "Suggestion": "Use sprintf_s, snprintf, or vsnprintf.", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 197, "Column": 4, "Context": "\t\t\tchar buff[100];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 211, "Column": 5, "Context": "char filename[50];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 212, "Column": 23, "Context": "    if(bind_to_cores) sprintf(filename, \"results_raw/%dP_%dM_bound.csv\", u_PRODUCERS_COUNT, u_PER_PRODUCER_MSG_COUNT);", "Description": "Does not check for buffer overflows (CWE-120).", "Symbol": "sprintf", "Type": "buffer", "Suggestion": "Use sprintf_s, snprintf, or vsnprintf.", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 213, "Column": 10, "Context": "    else sprintf(filename, \"results_raw/%dP_%dM.csv\", u_PRODUCERS_COUNT, u_PER_PRODUCER_MSG_COUNT);", "Description": "Does not check for buffer overflows (CWE-120).", "Symbol": "sprintf", "Type": "buffer", "Suggestion": "Use sprintf_s, snprintf, or vsnprintf.", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 214, "Column": 16, "Context": "    FILE *fp = fopen(filename, \"w\");", "Description": "Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).", "Symbol": "fopen", "Type": "misc", "Suggestion": "", "Primary CWE": 362, "CWE List": "362", "Additional Info": "https://cwe.mitre.org/data/definitions/362.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 216, "Column": 10, "Context": "    fp = fopen(filename, \"a\");", "Description": "Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362).", "Symbol": "fopen", "Type": "misc", "Suggestion": "", "Primary CWE": 362, "CWE List": "362", "Additional Info": "https://cwe.mitre.org/data/definitions/362.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 257, "Column": 2, "Context": "\tchar buff[100];", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 116, "Column": 5, "Context": "    char consumers[CONSUMERS_COUNT][MAX_ENDPOINT_STR_LENGTH] = { \"ipc:///tmp/cfw/cons_in_1\" };", "Description": "Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).", "Symbol": "char", "Type": "buffer", "Suggestion": "Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length.", "Primary CWE": 119, "CWE List": "119, 120", "Additional Info": "https://cwe.mitre.org/data/definitions/119.html"}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "FlawFinder", "Compliance Standard": "CWE", "Severity": "Major", "Line": 127, "Column": 13, "Context": "            sprintf(params[0], \"ipc:///tmp/cfw/c_%dw_%d\", cons, worker); ///< Worker Listener Endpoint to use for further communication", "Description": "Does not check for buffer overflows (CWE-120).", "Symbol": "sprintf", "Type": "buffer", "Suggestion": "Use sprintf_s, snprintf, or vsnprintf.", "Primary CWE": 120, "CWE List": "120", "Additional Info": "https://cwe.mitre.org/data/definitions/120.html"}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 125, "Column": 32, "Context": "    int worker_sockets_count = CONSUMERS_COUNT * ADDITIONAL_THREADS_PER_CONSUMER;", "Description": "A project shall not contain dead code", "Symbol": "CONSUMERS_COUNT", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "2.2", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 30, "Column": 22, "Context": "void* consumer(void* arg){", "Description": "A function should not contain unused parameters", "Symbol": "arg", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "2.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 238, "Column": 10, "Context": "void main(){", "Description": "Function types shall be in prototype form with named parameters", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.2", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 58, "Column": 5, "Context": "int isFirstWorkerForConsumer(char *worker_transport){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "isFirstWorkerForConsumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 64, "Column": 7, "Context": "void* log_worker(void* arg){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "log_worker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 106, "Column": 7, "Context": "void* log_broker(void* arg)", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "log_broker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 216, "Column": 7, "Context": "void* producer(void* arg){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "producer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 126, "Column": 61, "Context": "    zsock_t **worker_sockets = malloc( worker_sockets_count * sizeof(zsock_t*) );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "sizeof", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 131, "Column": 51, "Context": "            char **params = malloc( sizeof(char*) * 2 );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 132, "Column": 46, "Context": "            params[0] = malloc( sizeof(char) * MAX_ENDPOINT_STR_LENGTH );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "MAX_ENDPOINT_STR_LENGTH", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 134, "Column": 46, "Context": "            params[1] = malloc( sizeof(char) * MAX_ENDPOINT_STR_LENGTH );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "MAX_ENDPOINT_STR_LENGTH", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 149, "Column": 20, "Context": "    int *isReady = (int*)arg;", "Description": "A conversion should not be performed from pointer to void into pointer to object ", "Symbol": "int", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.5", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 218, "Column": 19, "Context": "    int pro_num = (int)arg;", "Description": "A cast shall not be performed between pointer to void and an arithmetic type", "Symbol": "int", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.6", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 254, "Column": 58, "Context": "        pthread_create(&(producers[i]), NULL, &producer, (void*)i);", "Description": "A cast shall not be performed between pointer to void and an arithmetic type", "Symbol": "void", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.6", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 59, "Column": 12, "Context": "   int cons, worker;", "Description": "The comma operator should not be used", "Symbol": "worker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "12.3", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 84, "Column": 15, "Context": "            if(isFirstWorkerForConsumer(worker_transport)) { zstr_send( consumer, END_SIGNAL ); }", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isFirstWorkerForConsumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 177, "Column": 19, "Context": "                if(isShutdownRequested) break;", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isShutdownRequested", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 180, "Column": 11, "Context": "        if(isShutdownRequested) break;", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isShutdownRequested", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 189, "Column": 4, "Context": "\tif(fp)//will be null if failed to open", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 45, "Column": 19, "Context": "            printf(\"%s\\n\", msg);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "s", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 60, "Column": 10, "Context": "   sscanf(worker_transport, \"ipc:///tmp/cfw/c_%dw_%d\", &cons, &worker);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "worker_transport", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 133, "Column": 20, "Context": "            sprintf(params[0], \"ipc:///tmp/cfw/c_%dw_%d\", cons, worker); ///< Worker Listener Endpoint to use for further communication", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "params", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 135, "Column": 19, "Context": "            strcpy(params[1], consumers[cons]); ///< Consumer Destination Endpoint", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "params", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 171, "Column": 12, "Context": "\t\t\tstrftime(buff, sizeof buff, \"%D %T\", gmtime(&ts.tv_sec));", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "buff", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 172, "Column": 32, "Context": "                        sprintf(inflow_timestamps[message_count], \"%s,%s.%09ld\", msg, buff, ts.tv_nsec);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "inflow_timestamps", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 185, "Column": 12, "Context": "    sprintf(filename, \"%dP_%dM.csv\", PRODUCERS_COUNT, PER_PRODUCER_MSG_COUNT);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "filename", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 187, "Column": 11, "Context": "    fclose(fp);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 192, "Column": 10, "Context": "\t\tfprintf(fp, \"%s\\r\\n\", inflow_timestamps[i]);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 194, "Column": 19, "Context": "            fclose(fp);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 198, "Column": 23, "Context": "                printf(\"%s\\n\", inflow_timestamps[i]);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "s", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 227, "Column": 10, "Context": "\tstrftime(buff, sizeof buff, \"%D %T\", gmtime(&ts.tv_sec));", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "buff", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 3, "Column": 0, "Context": "#include <stdio.h>", "Description": "The Standard Library input/output functions shall not be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.6", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 266, "Column": 9, "Context": "    exit(0);", "Description": "The Standard Library termination functions of <stdlib.h> shall not be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.8", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 7, "Column": 0, "Context": "#include <time.h>", "Description": "The Standard Library time and date functions shall not be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.10", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 142, "Column": 32, "Context": "    int worker_sockets_count = CONSUMERS_COUNT * ADDITIONAL_THREADS_PER_CONSUMER;", "Description": "A project shall not contain dead code", "Symbol": "CONSUMERS_COUNT", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "2.2", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 46, "Column": 22, "Context": "void* consumer(void* arg){", "Description": "A function should not contain unused parameters", "Symbol": "arg", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "2.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 256, "Column": 10, "Context": "void main(){", "Description": "Function types shall be in prototype form with named parameters", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.2", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 29, "Column": 5, "Context": "int stick_this_thread_to_core(int core_id) {", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "stick_this_thread_to_core", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 74, "Column": 5, "Context": "int isFirstWorkerForConsumer(char *worker_transport){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "isFirstWorkerForConsumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 80, "Column": 7, "Context": "void* log_worker(void* arg){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "log_worker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 122, "Column": 7, "Context": "void* log_broker(void* arg)", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "log_broker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 233, "Column": 7, "Context": "void* producer(void* arg){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "producer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 143, "Column": 61, "Context": "    zsock_t **worker_sockets = malloc( worker_sockets_count * sizeof(zsock_t*) );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "sizeof", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 148, "Column": 51, "Context": "            char **params = malloc( sizeof(char*) * 2 );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 149, "Column": 46, "Context": "            params[0] = malloc( sizeof(char) * MAX_ENDPOINT_STR_LENGTH );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "MAX_ENDPOINT_STR_LENGTH", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 151, "Column": 46, "Context": "            params[1] = malloc( sizeof(char) * MAX_ENDPOINT_STR_LENGTH );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "MAX_ENDPOINT_STR_LENGTH", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 166, "Column": 20, "Context": "    int *isReady = (int*)arg;", "Description": "A conversion should not be performed from pointer to void into pointer to object ", "Symbol": "int", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.5", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 234, "Column": 19, "Context": "    int pro_num = (int)arg;", "Description": "A cast shall not be performed between pointer to void and an arithmetic type", "Symbol": "int", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.6", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 272, "Column": 58, "Context": "        pthread_create(&(producers[i]), NULL, &producer, (void*)i);", "Description": "A cast shall not be performed between pointer to void and an arithmetic type", "Symbol": "void", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.6", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 31, "Column": 20, "Context": "   if (core_id < 0 || core_id >= num_cores)", "Description": "The precedence of operators within expressions should be made explicit", "Symbol": "core_id", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "12.1", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 75, "Column": 12, "Context": "   int cons, worker;", "Description": "The comma operator should not be used", "Symbol": "worker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "12.3", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 100, "Column": 15, "Context": "            if(isFirstWorkerForConsumer(worker_transport)) { zstr_send( consumer, END_SIGNAL ); }", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isFirstWorkerForConsumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 194, "Column": 19, "Context": "                if(isShutdownRequested) break;", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isShutdownRequested", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 197, "Column": 11, "Context": "        if(isShutdownRequested) break;", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isShutdownRequested", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 206, "Column": 4, "Context": "\tif(fp)//will be null if failed to open", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 32, "Column": 7, "Context": "      return EINVAL;", "Description": "A function should have a single point of exit at the end", "Symbol": "return", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "15.5", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 61, "Column": 19, "Context": "            printf(\"%s\\n\", msg);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "s", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 76, "Column": 10, "Context": "   sscanf(worker_transport, \"ipc:///tmp/cfw/c_%dw_%d\", &cons, &worker);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "worker_transport", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 124, "Column": 30, "Context": "    stick_this_thread_to_core(3);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 150, "Column": 20, "Context": "            sprintf(params[0], \"ipc:///tmp/cfw/c_%dw_%d\", cons, worker); ///< Worker Listener Endpoint to use for further communication", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "params", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 152, "Column": 19, "Context": "            strcpy(params[1], consumers[cons]); ///< Consumer Destination Endpoint", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "params", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 188, "Column": 12, "Context": "\t\t\tstrftime(buff, sizeof buff, \"%D %T\", gmtime(&ts.tv_sec));", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "buff", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 189, "Column": 32, "Context": "                        sprintf(inflow_timestamps[message_count], \"%s,%s.%09ld\", msg, buff, ts.tv_nsec);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "inflow_timestamps", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 202, "Column": 12, "Context": "    sprintf(filename, \"%dP_%dM_bound.csv\", PRODUCERS_COUNT, PER_PRODUCER_MSG_COUNT);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "filename", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 204, "Column": 11, "Context": "    fclose(fp);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 209, "Column": 10, "Context": "\t\tfprintf(fp, \"%s\\r\\n\", inflow_timestamps[i]);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 211, "Column": 19, "Context": "            fclose(fp);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 215, "Column": 23, "Context": "                printf(\"%s\\n\", inflow_timestamps[i]);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "s", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 235, "Column": 30, "Context": "    stick_this_thread_to_core(pro_num);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "pro_num", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 245, "Column": 10, "Context": "\tstrftime(buff, sizeof buff, \"%D %T\", gmtime(&ts.tv_sec));", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "buff", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 1, "Column": 0, "Context": "#define _GNU_SOURCE", "Description": "#define and #undef shall not be used on a reserved identifier or reserved macro name", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.1", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 5, "Column": 0, "Context": "#include <stdio.h>", "Description": "The Standard Library input/output functions shall not be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.6", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 284, "Column": 9, "Context": "    exit(0);", "Description": "The Standard Library termination functions of <stdlib.h> shall not be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.8", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_bound.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 9, "Column": 0, "Context": "#include <time.h>", "Description": "The Standard Library time and date functions shall not be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.10", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 152, "Column": 32, "Context": "    int worker_sockets_count = CONSUMERS_COUNT * ADDITIONAL_THREADS_PER_CONSUMER;", "Description": "A project shall not contain dead code", "Symbol": "CONSUMERS_COUNT", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "2.2", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 52, "Column": 22, "Context": "void* consumer(void* arg){", "Description": "A function should not contain unused parameters", "Symbol": "arg", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "2.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 36, "Column": 5, "Context": "int stick_this_thread_to_core(int core_id) {", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "stick_this_thread_to_core", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 80, "Column": 5, "Context": "int isFirstWorkerForConsumer(char *worker_transport){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "isFirstWorkerForConsumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 90, "Column": 7, "Context": "void* log_worker(void* arg){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "log_worker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 132, "Column": 7, "Context": "void* log_broker(void* arg)", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "log_broker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 245, "Column": 7, "Context": "void* producer(void* arg){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "producer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 21, "Column": 5, "Context": "int u_PRODUCERS_COUNT = 0, u_PER_PRODUCER_MSG_COUNT = 0, bind_to_cores = 0;", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "u_PRODUCERS_COUNT", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 153, "Column": 61, "Context": "    zsock_t **worker_sockets = malloc( worker_sockets_count * sizeof(zsock_t*) );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "sizeof", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 158, "Column": 51, "Context": "            char **params = malloc( sizeof(char*) * 2 );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 159, "Column": 46, "Context": "            params[0] = malloc( sizeof(char) * MAX_ENDPOINT_STR_LENGTH );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "MAX_ENDPOINT_STR_LENGTH", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 161, "Column": 46, "Context": "            params[1] = malloc( sizeof(char) * MAX_ENDPOINT_STR_LENGTH );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "MAX_ENDPOINT_STR_LENGTH", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 311, "Column": 53, "Context": "    pthread_t *producers = malloc(u_PRODUCERS_COUNT * sizeof(pthread_t));", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "sizeof", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 176, "Column": 20, "Context": "    int *isReady = (int*)arg;", "Description": "A conversion should not be performed from pointer to void into pointer to object ", "Symbol": "int", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.5", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 247, "Column": 19, "Context": "    int pro_num = (int)arg;", "Description": "A cast shall not be performed between pointer to void and an arithmetic type", "Symbol": "int", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.6", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 325, "Column": 58, "Context": "        pthread_create(&(producers[i]), NULL, &producer, (void*)i);", "Description": "A cast shall not be performed between pointer to void and an arithmetic type", "Symbol": "void", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.6", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 38, "Column": 20, "Context": "   if (core_id < 0 || core_id >= num_cores)", "Description": "The precedence of operators within expressions should be made explicit", "Symbol": "core_id", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "12.1", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 275, "Column": 50, "Context": "            if( sscanf(argv[i], \"%d\", &val) == 1 && val > 0 ){", "Description": "The precedence of operators within expressions should be made explicit", "Symbol": "val", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "12.1", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 286, "Column": 50, "Context": "            if( sscanf(argv[i], \"%d\", &val) == 1 && val > 0 ){", "Description": "The precedence of operators within expressions should be made explicit", "Symbol": "val", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "12.1", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 81, "Column": 12, "Context": "   int cons, worker;", "Description": "The comma operator should not be used", "Symbol": "worker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "12.3", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 274, "Column": 6, "Context": "\t    i++;", "Description": "A for loop shall be well-formed", "Symbol": "i", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.2", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 285, "Column": 13, "Context": "            i++;", "Description": "A for loop shall be well-formed", "Symbol": "i", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.2", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 110, "Column": 15, "Context": "            if(isFirstWorkerForConsumer(worker_transport)) { zstr_send( consumer, END_SIGNAL ); }", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isFirstWorkerForConsumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 134, "Column": 7, "Context": "    if(bind_to_cores) stick_this_thread_to_core(sysconf(_SC_NPROCESSORS_ONLN) - 1); // Use last core for log broker", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "bind_to_cores", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 204, "Column": 19, "Context": "                if(isShutdownRequested) break;", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isShutdownRequested", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 207, "Column": 11, "Context": "        if(isShutdownRequested) break;", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isShutdownRequested", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 212, "Column": 7, "Context": "    if(bind_to_cores) sprintf(filename, \"results_raw/%dP_%dM_bound.csv\", u_PRODUCERS_COUNT, u_PER_PRODUCER_MSG_COUNT);", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "bind_to_cores", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 217, "Column": 4, "Context": "\tif(fp)//will be null if failed to open", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 248, "Column": 7, "Context": "    if(bind_to_cores) stick_this_thread_to_core(pro_num % num_cores);", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "bind_to_cores", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 39, "Column": 7, "Context": "      return EINVAL;", "Description": "A function should have a single point of exit at the end", "Symbol": "return", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "15.5", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 213, "Column": 5, "Context": "    else sprintf(filename, \"results_raw/%dP_%dM.csv\", u_PRODUCERS_COUNT, u_PER_PRODUCER_MSG_COUNT);", "Description": "The body of an iteration-statement or a selection-statement shall be a compound-statement", "Symbol": "else", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "15.6", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 297, "Column": 9, "Context": "        }", "Description": "All if \u2026 else if constructs shall be terminated with an else statement", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "15.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 67, "Column": 19, "Context": "            printf(\"%s\\n\", msg);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "s", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 82, "Column": 10, "Context": "   sscanf(worker_transport, \"ipc:///tmp/cfw/c_%dw_%d\", &cons, &worker);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "worker_transport", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 160, "Column": 20, "Context": "            sprintf(params[0], \"ipc:///tmp/cfw/c_%dw_%d\", cons, worker); ///< Worker Listener Endpoint to use for further communication", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "params", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 162, "Column": 19, "Context": "            strcpy(params[1], consumers[cons]); ///< Consumer Destination Endpoint", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "params", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 198, "Column": 12, "Context": "\t\t\tstrftime(buff, sizeof buff, \"%D %T\", gmtime(&ts.tv_sec));", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "buff", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 199, "Column": 32, "Context": "                        sprintf(inflow_timestamps[message_count], \"%s,%s.%09ld\", msg, buff, ts.tv_nsec);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "inflow_timestamps", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 215, "Column": 11, "Context": "    fclose(fp);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 220, "Column": 10, "Context": "\t\tfprintf(fp, \"%s\\r\\n\", inflow_timestamps[i]);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 222, "Column": 19, "Context": "            fclose(fp);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "fp", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 226, "Column": 23, "Context": "                printf(\"%s\\n\", inflow_timestamps[i]);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "s", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 258, "Column": 10, "Context": "\tstrftime(buff, sizeof buff, \"%D %T\", gmtime(&ts.tv_sec));", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "buff", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 277, "Column": 23, "Context": "                printf(\"Using %d for Number of Producers.\\n\", u_PRODUCERS_COUNT);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Using", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 280, "Column": 23, "Context": "                printf(\"%s is a invalid value for --np\\n\", argv[i]);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "s", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 288, "Column": 23, "Context": "                printf(\"Using %d for Messages/Producers.\\n\", u_PER_PRODUCER_MSG_COUNT);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Using", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 291, "Column": 23, "Context": "                printf(\"%s is a invalid value for --nm\\n\", argv[i]);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "s", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 296, "Column": 19, "Context": "            printf(\"Binding Producers and Logging thread to Cores.\\n\");", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Binding", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 302, "Column": 17, "Context": "          printf(\"Using Default value of %d for Number of Producers.\\n\", PRODUCERS_COUNT);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Using", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 307, "Column": 16, "Context": "         printf(\"Using Default value of %d for Messages/Producer.\\n\", PER_PRODUCER_MSG_COUNT);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Using", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 312, "Column": 11, "Context": "    printf(\"Created Producer Threads.\\n\");", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Created", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 141, "Column": 10, "Context": "    char inflow_timestamps[u_PRODUCERS_COUNT * u_PER_PRODUCER_MSG_COUNT][(MSG_MAX_LENGTH * 2) + 1];", "Description": "Variable-length arrays shall not be used", "Symbol": "inflow_timestamps", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "18.8", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 5, "Column": 0, "Context": "#define _GNU_SOURCE", "Description": "#define and #undef shall not be used on a reserved identifier or reserved macro name", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.1", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 9, "Column": 0, "Context": "#include <stdio.h>", "Description": "The Standard Library input/output functions shall not be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.6", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 13, "Column": 0, "Context": "#include <time.h>", "Description": "The Standard Library time and date functions shall not be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.10", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 119, "Column": 32, "Context": "    int worker_sockets_count = CONSUMERS_COUNT * ADDITIONAL_THREADS_PER_CONSUMER;", "Description": "A project shall not contain dead code", "Symbol": "CONSUMERS_COUNT", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "2.2", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 25, "Column": 22, "Context": "void* consumer(void* arg){", "Description": "A function should not contain unused parameters", "Symbol": "arg", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "2.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 205, "Column": 10, "Context": "void main(){", "Description": "Function types shall be in prototype form with named parameters", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.2", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 53, "Column": 5, "Context": "int isFirstWorkerForConsumer(char *worker_transport){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "isFirstWorkerForConsumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 59, "Column": 7, "Context": "void* log_worker(void* arg){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "log_worker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 102, "Column": 7, "Context": "void* log_broker(void* arg)", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "log_broker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 187, "Column": 7, "Context": "void* producer(void* arg){", "Description": "A compatible declaration shall be visible when an object or function with external linkage is defined", "Symbol": "producer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.4", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 120, "Column": 61, "Context": "    zsock_t **worker_sockets = malloc( worker_sockets_count * sizeof(zsock_t*) );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "sizeof", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 125, "Column": 51, "Context": "            char **params = malloc( sizeof(char*) * 2 );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 126, "Column": 46, "Context": "            params[0] = malloc( sizeof(char) * MAX_ENDPOINT_STR_LENGTH );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "MAX_ENDPOINT_STR_LENGTH", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 128, "Column": 46, "Context": "            params[1] = malloc( sizeof(char) * MAX_ENDPOINT_STR_LENGTH );", "Description": "Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category", "Symbol": "MAX_ENDPOINT_STR_LENGTH", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "10.4", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 143, "Column": 20, "Context": "    int *isReady = (int*)arg;", "Description": "A conversion should not be performed from pointer to void into pointer to object ", "Symbol": "int", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.5", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 189, "Column": 19, "Context": "    int pro_num = (int)arg;", "Description": "A cast shall not be performed between pointer to void and an arithmetic type", "Symbol": "int", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.6", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 221, "Column": 58, "Context": "        pthread_create(&(producers[i]), NULL, &producer, (void*)i);", "Description": "A cast shall not be performed between pointer to void and an arithmetic type", "Symbol": "void", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "11.6", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 54, "Column": 12, "Context": "   int cons, worker;", "Description": "The comma operator should not be used", "Symbol": "worker", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "12.3", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 79, "Column": 15, "Context": "            if(isFirstWorkerForConsumer(worker_transport)) { zstr_send( consumer, END_SIGNAL ); }", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isFirstWorkerForConsumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 166, "Column": 19, "Context": "                if(isShutdownRequested) break;", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isShutdownRequested", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 169, "Column": 11, "Context": "        if(isShutdownRequested) break;", "Description": "The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type", "Symbol": "isShutdownRequested", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "14.4", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 28, "Column": 11, "Context": "    printf(\"Consumer is UP.\\n\");", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Consumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 34, "Column": 19, "Context": "            printf(\"Recieved %s Signal for Consumer.\\n\", END_SIGNAL);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Recieved", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 40, "Column": 19, "Context": "            printf(\"%s\\n\", msg);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "s", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 45, "Column": 11, "Context": "    printf(\"Consumer Terminated.\\n\");", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Consumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 55, "Column": 10, "Context": "   sscanf(worker_transport, \"ipc:///tmp/cfw/c_%dw_%d\", &cons, &worker);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "worker_transport", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 64, "Column": 11, "Context": "    printf(\"Consumer Endpoint - %s\\n\", consumer_endpoint);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Consumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 80, "Column": 19, "Context": "            printf(\"%s - Terminating...\\n\", worker_transport);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "s", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 104, "Column": 11, "Context": "    printf(\"Initializing Log Broker...\\n\");", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Initializing", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 109, "Column": 11, "Context": "    printf(\"Log Broker Initialized.\\nConsumer Workers Initializing...\\n\");", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Log", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 127, "Column": 20, "Context": "            sprintf(params[0], \"ipc:///tmp/cfw/c_%dw_%d\", cons, worker); ///< Worker Listener Endpoint to use for further communication", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "params", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 129, "Column": 19, "Context": "            strcpy(params[1], consumers[cons]); ///< Consumer Destination Endpoint", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "params", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 140, "Column": 11, "Context": "    printf(\"Consumer Workers Initialized.\\n\");", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Consumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 147, "Column": 11, "Context": "    printf(\"Listening...\\n\");", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Listening", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 183, "Column": 11, "Context": "    printf(\"Log Broker Terminated.\\n\");", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Log", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 191, "Column": 11, "Context": "    printf(\"Producer %d is now UP.\\n\", pro_num);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Producer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 201, "Column": 11, "Context": "    printf(\"Producer %d is now Terminated.\\n\", pro_num);", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Producer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 216, "Column": 11, "Context": "    printf(\"Waiting for Log Broker to start...\\n\");", "Description": "The value returned by a function having non-void return type shall be used", "Symbol": "Waiting", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "17.7", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 3, "Column": 0, "Context": "#include <stdio.h>", "Description": "The Standard Library input/output functions shall not be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.6", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 233, "Column": 9, "Context": "    exit(0);", "Description": "The Standard Library termination functions of <stdlib.h> shall not be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.8", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 7, "Column": 0, "Context": "#include <time.h>", "Description": "The Standard Library time and date functions shall not be used", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "21.10", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking_cli.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 269, "Column": 5, "Context": "int main(int argc, char **argv){", "Description": "An identifier with external linkage shall have exactly one external definition", "Symbol": "main", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "8.6", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 22, "Column": 0, "Context": "#define INIT_SIGNAL \"INIT\" ///< Message used to initialise connection b/w Router and Dealer Sockets.", "Description": "A project should not contain unused macro definitions", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "2.5", "Additional Info": null}, {"Module Type": "code", "File Name": "benchmark/logger_benchmarking.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Minor", "Line": 23, "Column": 0, "Context": "#define READY_SIGNAL \"READY\" ///< Message used as Ready Signal.", "Description": "A project should not contain unused macro definitions", "Symbol": null, "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "2.5", "Additional Info": null}, {"Module Type": "code", "File Name": "logger.c", "Module Name": "CPPCheck", "Compliance Standard": "MISRA", "Severity": "Major", "Line": 26, "Column": 14, "Context": "    zsock_t *consumer = zsock_new_pull(\"ipc:///tmp/cfw/cons_in_1\");", "Description": "Identifiers that define objects or functions with external linkage shall be unique", "Symbol": "consumer", "Type": "MISRA Violation", "Suggestion": null, "MISRA Rule Number": "5.8", "Additional Info": null}]}